<?
	const server=service_require("web/player/server");
	const player=service_require("web/player/player");

	const {action,client_id}=input;
	const client=server.clients.get(client_id);
	
	function end(code,msg){
		response.write(msg);
		response.statusCode=code;
		// throw here!
	}

	if(!client) return end(400,"client not exist."); // client id wrong or undefined.
	log("action: "+action);
	if(action==="request_albums"){
		client.requests.push("get_albums");
		client.check();
		return end(200,"OK");
	}
	/*else if(action==="nextTick"){
		client.check();
		return end(200,"OK");
	}*/
	else if(action==="request_files"){
		if(typeof(input.files)!=="object") return end(400,"requested files not sended.");
		client.requests.push(["get_files",input.files]);
		client.check();
		return end(200,"OK");
	}
	else if(action==="player_play"){
		// TODO permission check.
		// TODO send !OK if playback not resumed.
		const mode=input.mode||"append"; // modes: force (play directly), next (adds to playlist as next track), append (appends of the end of the playlist)
		const track_ids=(input.method==="get"
			?	(input.track_ids?input.track_ids.split(";").map(item=>Number(item.trim())):null)
			:	(input.track_ids?input.track_ids:null)
		);
		const track_id=input.track_id?Number(input.track_id):null;
		const album_id=Number(input.album_id)||null;

		if(album_id) await player.play("album_id",album_id,mode);
		else if(track_ids) await player.play("track_ids",track_ids,mode);
		else if(track_id) await player.play("track_id",track_id,mode);
		else player.play();
		
		return end(200,"OK");
	}
	else if(action==="player_next"){
		const skip_count=Number(input.skipCount)||0;
		//if(skip_count>0) player.current_playlist.splice(0,skip_count); // shifting the songs out.
		await player.playNext(skip_count);
		return end(200,"OK");
	}
	else if(action==="player_pause"){
		if(player.playback.playing&&!player.playback.paused){
			await player.pausePlayback();
			return end(200,"OK");
		}
		else return end(400,"playback cant paused.");
	}
	else if(action==="player_resume"){
		if(!player.playback.playing&&player.playback.paused){
			await player.resumePlayback();
			return end(200,"OK");
		}
		else return end(400,"playback cant resume, is not paused.");
	}
	else return end(400,"request action not exist."); // action not exists.
?>